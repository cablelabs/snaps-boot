# Copyright (c) 2019 Cable Television Laboratories, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Ansible Playbook to run CI on EC2
---
- hosts: localhost

  gather_facts: no

  vars:
    run_build_var: "{{ run_build | default(true) }}"
    run_validation_var: "{{ run_validation | default(true) }}"
    destroy_var: "{{ destroy | default(true) }}"

  tasks:
    - name: Run build flag
      debug:
        var: run_build_var|bool
    - name: Run validation flag
      debug:
        var: run_validation_var|bool
    - name: Destroy flag
      debug:
        var: destroy_var|bool

    - name: Create Terraform binary directory
      file:
        path: "/tmp/{{ build_id}}/terraform-12.4"
        state: directory

    - name: Download Terraform
      unarchive:
        src: https://releases.hashicorp.com/terraform/0.12.4/terraform_0.12.4_linux_amd64.zip
        dest: "/tmp/{{ build_id}}/terraform-12.4"
        remote_src: yes

    - name: Create VM
      terraform:
        binary_path: "/tmp/{{ build_id}}/terraform-12.4/terraform"
        project_path: ./terraform
        variables_file: "{{ tf_var_file }}"
        force_init: true
        variables:
          build_id: "{{ build_id }}"
      register: tf_out
    - debug:
        var: tf_out

    - name: set pk file permissions to {{ tf_out.outputs.priv_key_file.value }}
      file:
        path: "{{ tf_out.outputs.priv_key_file.value }}"
        mode: 0600

    - name: Setup KVM
      shell: >-
        ansible-playbook ../playbooks/setup_kvm.yaml
        -i '{{ tf_out.outputs.pub_ip.value }},'
        -u {{ tf_out.outputs.sudo_user.value }}
        --key-file {{ tf_out.outputs.priv_key_file.value }}
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      when: run_build_var|bool

#    - name: Install snaps-boot
#      shell: >-
#        ansible-playbook ../playbooks/setup_build.yaml
#        -i '{{ tf_out.outputs.pub_ip.value }},'
#        -u {{ tf_out.outputs.sudo_user.value }}
#        --key-file {{ tf_out.outputs.priv_key_file.value }}
#        --extra-vars
#        'build_id={{ build_id }}'
#      environment:
#        ANSIBLE_HOST_KEY_CHECKING: "False"
#      register: deploy_out
#      ignore_errors: yes
#      when: run_build_var|bool
#
#    - name: k8s deploy out on failure
#      debug:
#        var: deploy_out.stdout_lines
#      when: deploy_out is defined
#    - fail:
#      when: deploy_out is defined and deploy_out.rc is defined and deploy_out.rc != 0
#
#    - name: Validate snaps-boot installation
#      shell: >-
#        ansible-playbook ../playbooks/validation.yaml
#        -i '{{ tf_out.outputs.pub_ip.value }},'
#        -u {{ tf_out.outputs.sudo_user.value }}
#        --key-file {{ tf_out.outputs.priv_key_file.value }}
#        --extra-vars
#        'src_copy_dir={{ src_copy_dir | default('/tmp') }}
#        deployment_yaml_path={{ deployment_yaml_target_path | default('/tmp/deployment.yaml') }}'
#      environment:
#        ANSIBLE_HOST_KEY_CHECKING: "False"
#      when: run_validation_var|bool
#
#    - name: Destroy VM
#      terraform:
#        binary_path: "/tmp/{{ build_id}}/terraform-12.4/terraform"
#        project_path: ./terraform
#        variables_file: "{{ tf_var_file }}"
#        purge_workspace: yes
#        state: absent
#        variables:
#          build_id: "{{ build_id }}"
#      register: tf_destroy_out
#      when: destroy_var|bool
