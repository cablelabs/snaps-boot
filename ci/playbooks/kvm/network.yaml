# Copyright (c) 2019 Cable Television Laboratories, Inc. ("CableLabs")
#                    and others.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- hosts: all

  become: yes
  gather_facts: no

  vars:
    net_type: "{{ net_type }}"

  tasks:
    - name: Destroy {{ network_name }} network
      virt_net:
        command: destroy
        name: "{{ network_name }}"
      ignore_errors: yes

    - name: Define DHCP network {{ network_name }} with IP {{ ip_prefix }}.0
      virt_net:
        command: define
        name: "{{ network_name }}"
        xml: '{{ lookup("template", "networks/dhcp-network.xml.j2") }}'
      vars:
        net_name: "{{ network_name }}"
        bridge_name: "{{ br_name }}"
        ip_prfx: "{{ ip_prefix }}"
        netmask: "{{ netmask_val }}"
        forward_mode: route
        forward_nic: ens5
      when: net_type == 'route'

    - name: Define network {{ network_name }}
      virt_net:
        command: define
        name: "{{ network_name }}"
        xml: '{{ lookup("template", "networks/iso-network.xml.j2") }}'
      vars:
        net_name: "{{ network_name }}"
        bridge_name: "{{ br_name }}"
        ip_prfx: "{{ ip_prefix }}"
        netmask: "{{ netmask_val }}"
      when: net_type == 'isolate'

    - name: Define DHCP network {{ network_name }} with IP {{ ip_prefix }}.0
      virt_net:
        name: "{{ network_name }}"
        command: define
        xml: '{{ lookup("template", "networks/bridged-network.xml.j2") }}'
      vars:
        net_name: "{{ network_name }}"
        bridge_name: "{{ br_name }}"
        forward_mode: bridge
      when: net_type == 'bridge'

    - name: Set autostart on {{ network_name }} network
      virt_net:
        name: "{{ network_name }}"
        autostart: yes

    - name: Create {{ network_name }} network
      virt_net:
        command: create
        name: "{{ network_name }}"
