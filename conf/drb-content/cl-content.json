{
  "meta": {
    "Description": "SNAPS Digital Rebar Provision Community Content",
    "Documentation": "Unspecified",
    "Name": "cl-drp-content",
    "Overwritable": true,
    "RequiredFeatures": "sane-exit-codes, job-exit-states, fsm-runner, workflows, default-workflow, http-range-header, roles, tenants, sprig",
    "Source": "https://github.com/digitalrebar/provision-content",
    "Type": "default",
    "Version": "v0.0.2",
    "Writable": true
  },
  "sections": {
    "bootenvs": {
      "centos-7.5.1804-install": {
        "Available": false,
        "BootParams": "ksdevice=bootif ks={{.Machine.Url}}/compute.ks method={{.Env.InstallUrl}} inst.geoloc=0 -- {{if .ParamExists \"kernel-console\"}}{{.Param \"kernel-console\"}}{{end}}",
        "Description": "CentOS-7.5.1804 install bootenv",
        "Documentation": "",
        "Errors": [],
        "Initrds": [
          "images/pxeboot/initrd.img"
        ],
        "Kernel": "images/pxeboot/vmlinuz",
        "Meta": {
          "color": "blue",
          "feature-flags": "change-stage-v2",
          "icon": "linux",
          "title": "Digital Rebar Community Content"
        },
        "Name": "centos-7.5.1804-install",
        "OS": {
          "Codename": "",
          "Family": "redhat",
          "IsoFile": "CentOS-7-x86_64-Minimal-1804.iso",
          "IsoSha256": "714acc0aefb32b7d51b515e25546835e55a90da9fb00417fbee2d03a62801efd",
          "IsoUrl": "http://mirror.math.princeton.edu/pub/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso",
          "Name": "centos-7.5.1804",
          "Version": ""
        },
        "OnlyUnknown": false,
        "OptionalParams": [
          "operating-system-disk",
          "provisioner-default-password-hash",
          "kernel-console",
          "proxy-servers",
          "select-kickseed"
        ],
        "ReadOnly": false,
        "RequiredParams": null,
        "Templates": [
          {
            "Contents": "",
            "ID": "kexec.tmpl",
            "Meta": null,
            "Name": "kexec",
            "Path": "{{.Machine.Path}}/kexec"
          },
          {
            "Contents": "",
            "ID": "default-pxelinux.tmpl",
            "Meta": null,
            "Name": "pxelinux",
            "Path": "pxelinux.cfg/{{.Machine.HexAddress}}"
          },
          {
            "Contents": "",
            "ID": "default-ipxe.tmpl",
            "Meta": null,
            "Name": "ipxe",
            "Path": "{{.Machine.Address}}.ipxe"
          },
          {
            "Contents": "",
            "ID": "default-pxelinux.tmpl",
            "Meta": null,
            "Name": "pxelinux-mac",
            "Path": "pxelinux.cfg/{{.Machine.MacAddr \"pxelinux\"}}"
          },
          {
            "Contents": "",
            "ID": "default-ipxe.tmpl",
            "Meta": null,
            "Name": "ipxe-mac",
            "Path": "{{.Machine.MacAddr \"ipxe\"}}.ipxe"
          },
          {
            "Contents": "",
            "ID": "select-kickseed.tmpl",
            "Meta": null,
            "Name": "compute.ks",
            "Path": "{{.Machine.Path}}/compute.ks"
          }
        ],
        "Validated": false
      },
      "custom-ipxe": {
        "Available": false,
        "BootParams": "",
        "Description": "Boot system using a custom ipxe config file",
        "Documentation": "",
        "Errors": [],
        "Initrds": [],
        "Kernel": "../ipxe.pxe",
        "Meta": {},
        "Name": "custom-ipxe",
        "OS": {
          "Codename": "",
          "Family": "",
          "IsoFile": "",
          "IsoSha256": "",
          "IsoUrl": "",
          "Name": "ipxe",
          "Version": ""
        },
        "OnlyUnknown": false,
        "OptionalParams": [],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "DEFAULT discovery\nPROMPT 0\nTIMEOUT 10\nLABEL discovery\n  KERNEL ipxe.pxe\n",
            "ID": "",
            "Meta": null,
            "Name": "pxelinux",
            "Path": "pxelinux.cfg/{{.Machine.HexAddress}}"
          },
          {
            "Contents": "DEFAULT discovery\nPROMPT 0\nTIMEOUT 10\nLABEL discovery\n  KERNEL ipxe.pxe\n",
            "ID": "",
            "Meta": null,
            "Name": "pxelinux-mac",
            "Path": "pxelinux.cfg/{{.Machine.MacAddr \"pxelinux\"}}"
          },
          {
            "Contents": "#!ipxe\n{{.Param \"custom-ipxe\"}}\n",
            "ID": "",
            "Meta": null,
            "Name": "ipxe",
            "Path": "{{.Machine.Address}}.ipxe"
          },
          {
            "Contents": "#!ipxe\n{{.Param \"custom-ipxe\"}}\n",
            "ID": "",
            "Meta": null,
            "Name": "ipxe-mac",
            "Path": "{{.Machine.MacAddr \"ipxe\"}}.ipxe"
          }
        ],
        "Validated": false
      },
      "discovery": {
        "Available": false,
        "BootParams": "rootflags=loop root=live:/sledgehammer.iso rootfstype=auto ro liveimg rd_NO_LUKS rd_NO_MD rd_NO_DM provisioner.web={{.ProvisionerURL}} -- {{if .ParamExists \"kernel-console\"}}{{.Param \"kernel-console\"}}{{end}}",
        "Description": "The boot environment to use to have unknown machines boot to default Stage/BootEnv",
        "Documentation": "",
        "Errors": [],
        "Initrds": [
          "stage1.img"
        ],
        "Kernel": "vmlinuz0",
        "Meta": {
          "color": "blue",
          "feature-flags": "change-stage-v2",
          "icon": "binoculars",
          "title": "Digital Rebar Community Content"
        },
        "Name": "discovery",
        "OS": {
          "Codename": "",
          "Family": "redhat",
          "IsoFile": "sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar",
          "IsoSha256": "",
          "IsoUrl": "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37/sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar",
          "Name": "sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37",
          "Version": ""
        },
        "OnlyUnknown": true,
        "OptionalParams": [
          "kernel-console"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "DEFAULT discovery\nPROMPT 0\nTIMEOUT 10\nLABEL discovery\n  KERNEL {{.Env.PathFor \"tftp\" .Env.Kernel}}\n  INITRD {{.Env.JoinInitrds \"tftp\"}}\n  APPEND {{.BootParams}}\n  IPAPPEND 2\n",
            "ID": "",
            "Meta": null,
            "Name": "pxelinux",
            "Path": "pxelinux.cfg/default"
          },
          {
            "Contents": "#!ipxe\nchain {{.ProvisionerURL}}/${netX/mac}.ipxe \u0026\u0026 exit || goto chainip\n:chainip\nchain {{.ProvisionerURL}}/${netX/ip}.ipxe \u0026\u0026 exit || goto sledgehammer\n:sledgehammer\nkernel {{.Env.PathFor \"http\" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}\ninitrd {{.Env.PathFor \"http\" (index .Env.Initrds 0)}}\nboot\n",
            "ID": "",
            "Meta": null,
            "Name": "ipxe",
            "Path": "default.ipxe"
          },
          {
            "Contents": "#!/bin/bash\nexport PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\n\nget_macs() {\n    local maclist=\"\"\n    local nic=\"\"\n    for nic in /sys/class/net/*; do\n        [[ -f $nic/type \u0026\u0026 -f $nic/address \u0026\u0026 $(cat \"$nic/type\") == 1 ]] || continue\n        maclist=\"$maclist,\\\"$(cat \"$nic/address\")\\\"\"\n    done\n    printf '[%s]' \"${maclist#,}\"\n}\n\nif [[ ! -f /etc/systemd/network/20-bootif.network ]]; then\n    get_param() {\n        [[ $(cat /proc/cmdline) =~ $1 ]] \u0026\u0026 echo \"${BASH_REMATCH[1]}\"\n    }\n\n    dhcp_param() {\n        [[ $(cat /var/lib/dhclient/dhclient.leases) =~ $1 ]] \u0026\u0026 echo \"${BASH_REMATCH[1]}\"\n    }\n\n\n# Since we are not using normal networking, make sure that\n# dhclient will stick around forever even if we exit\n    cat \u003e\"/etc/systemd/system/dhclient-$BOOTDEV.service\" \u003c\u003c EOF\n[Unit]\nDescription=dhclient for $BOOTDEV.service\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nExecStart=/sbin/dhclient --no-pid -d $BOOTDEV\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    systemctl daemon-reload\n    dhclient -x\n    systemctl start \"dhclient-$BOOTDEV\"\n    sleep 5\n\n    # Stuff from sledgehammer file that makes this command debuggable\n    # Some useful boot parameter matches\n    ip_re='([0-9a-f.:]+/[0-9]+)'\n    host_re='rs\\.uuid=([^ ]+)'\n    hostname_re='option host-name \"([^\"]+)'\n    fixed_ip='fixed-address ([0-9a-f.:]+)'\n    uuid_re='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$'\n    netname_re='\"network\":\"([^ ]+)\"'\n\n    # Assume nothing about the hostname.\n    unset HOSTNAME\n\n    # Check for DHCP set host name.  Expand it to a FQDN if needed.\n    if dhcp_hostname=\"$(dhcp_param \"$hostname_re\")\"; then\n        echo \"Hostname set by DHCP to $dhcp_hostname\"\n        if [[ ${dhcp_hostname%%.*} == $dhcp_hostname ]]; then\n            HOSTNAME=\"${dhcp_hostname}.${DOMAIN}\"\n        else\n            HOSTNAME=\"$dhcp_hostname\"\n        fi\n    else\n        dhcp_ip=\"$(dhcp_param \"$fixed_ip\")\"\n        if [[ $dhcp_ip != \"\" ]]  ; then\n            lookup_1=$(getent hosts $dhcp_ip | awk '{print $2}')\n            lookup_2=$(getent hosts $dhcp_ip | awk '{print $2}')\n            if [[ $lookup_1 \u0026\u0026 $lookup_1 == $lookup_2 \u0026\u0026 $lookup_1 != localhost* ]]; then\n                HOSTNAME=$lookup_1\n            fi\n        fi\n    fi\nfi\n# Perform minimal required bootstrapping for discovery\nexport RS_TOKEN=\"{{.GenerateToken}}\"\nexport RS_ENDPOINT=\"{{.ApiURL}}\"\nmkdir -p /usr/local/bin\ngrep -q '/usr/local/bin' \u003c\u003c\u003c \"$PATH\" || export PATH=\"$PATH:/usr/local/bin\"\nfor tool in drpcli jq; do\n    which \"$tool\" \u0026\u003e/dev/null \u0026\u0026 continue\n    echo \"Installing $tool in /usr/local/bin\"\n    case $tool in\n        drpcli) curl -sfLo \"/usr/local/bin/$tool\" \"{{.ProvisionerURL}}/files/drpcli.amd64.linux\";;\n        jq)     curl -sfLo \"/usr/local/bin/$tool\" \"{{.ProvisionerURL}}/files/jq\";;\n    esac\n    chmod 755 \"/usr/local/bin/$tool\"\ndone\nunset tool\n\n# See if we have already been created.\nif [[ $(cat /proc/cmdline) =~ $host_re ]]; then\n    RS_UUID=\"${BASH_REMATCH[1]}\"\n    json=\"$(drpcli machines show \"$RS_UUID\")\"\n    # If we did not get a hostname from DHCP, get it from DigitalRebar Provision.\n    if [[ ! $HOSTNAME ]]; then\n        HOSTNAME=\"$(jq -r '.Name' \u003c\u003c\u003c \"$json\")\"\n    fi\nelse\n    # If we did not get a hostname from DHCP, generate one for ourselves.\n    [[ $HOSTNAME ]] || HOSTNAME=\"d${MAC//:/-}.${DOMAIN}\"\n    IP=\"\"\n    bootdev_ip_re='inet ([0-9.]+)/([0-9]+)'\n    if [[ $(ip -4 -o addr show dev $BOOTDEV) =~ $bootdev_ip_re ]]; then\n        IP=\"${BASH_REMATCH[1]}\"\n    fi\n\n    # Create a new node for us,\n    # Add the default noderoles we will need, and\n    # Let the annealer do its thing.\n    while ! json=\"$(drpcli machines create \"{\\\"Name\\\": \\\"$HOSTNAME\\\",\n                                         \\\"Address\\\": \\\"$IP\\\",\n                                         \\\"HardwareAddrs\\\": $(get_macs)}\")\"; do\n        echo \"We could not create a node for ourself, trying again.\"\n        sleep 5\n    done\n    RS_UUID=\"$(jq -r '.Uuid' \u003c\u003c\u003c \"$json\")\"\n\nfi\necho \"${RS_UUID}\" \u003e /etc/rs-uuid\n# Set our hostname for everything else.\nif [ -f /etc/sysconfig/network ] ; then\n    sed -i -e \"s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/\" /etc/sysconfig/network\nfi\necho \"${HOSTNAME#*.}\" \u003e/etc/domainname\nhostname \"$HOSTNAME\"\n\n{{template \"profile.tmpl\" .}}\n\n# Force reliance on DNS\necho '127.0.0.1 localhost' \u003e/etc/hosts\n\nif ! curl -s -f -L -o /tmp/control.sh \"$PROVISIONER_WEB/machines/$RS_UUID/control.sh\" \u0026\u0026 \\\n    grep -q '^exit 0$' /tmp/control.sh \u0026\u0026 \\\n    head -1 /tmp/control.sh | grep -q '^#!/bin/bash'; then\n    echo \"Could not load our control.sh!\"\n    exit 1\nfi\nchmod 755 /tmp/control.sh\n\nexport RS_UUID BOOTDEV PROVISIONER_WEB MAC DOMAIN DNS_SERVERS HOSTNAME\n\necho \"transfer from start-up to control script\"\n\n[[ -x /tmp/control.sh ]] \u0026\u0026 exec /tmp/control.sh\n\necho \"Did not get control.sh from $PROVISIONER_WEB/machines/$RS_UUID/control.sh\"\nexit 1\n",
            "ID": "",
            "Meta": null,
            "Name": "start-up.sh",
            "Path": "machines/start-up.sh"
          }
        ],
        "Validated": false
      },
      "sledgehammer": {
        "Available": false,
        "BootParams": "rootflags=loop root=live:/sledgehammer.iso rootfstype=auto ro liveimg rd_NO_LUKS rd_NO_MD rd_NO_DM provisioner.web={{.ProvisionerURL}} rs.uuid={{.Machine.UUID}} -- {{if .ParamExists \"kernel-console\"}}{{.Param \"kernel-console\"}}{{end}}",
        "Description": "Ram-Only image loaded with tools to allow for discovery and maintenance",
        "Documentation": "",
        "Errors": [],
        "Initrds": [
          "stage1.img"
        ],
        "Kernel": "vmlinuz0",
        "Meta": {
          "color": "green",
          "feature-flags": "change-stage-v2",
          "icon": "microchip",
          "title": "Digital Rebar Community Content"
        },
        "Name": "sledgehammer",
        "OS": {
          "Codename": "",
          "Family": "redhat",
          "IsoFile": "sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar",
          "IsoSha256": "",
          "IsoUrl": "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37/sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar",
          "Name": "sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37",
          "Version": ""
        },
        "OnlyUnknown": false,
        "OptionalParams": [
          "kernel-console"
        ],
        "ReadOnly": false,
        "RequiredParams": null,
        "Templates": [
          {
            "Contents": "",
            "ID": "kexec.tmpl",
            "Meta": null,
            "Name": "kexec",
            "Path": "{{.Machine.Path}}/kexec"
          },
          {
            "Contents": "DEFAULT discovery\nPROMPT 0\nTIMEOUT 10\nLABEL discovery\n  KERNEL {{.Env.PathFor \"tftp\" .Env.Kernel}}\n  INITRD {{.Env.JoinInitrds \"tftp\"}}\n  APPEND {{.BootParams}}\n  IPAPPEND 2\n",
            "ID": "",
            "Meta": null,
            "Name": "pxelinux",
            "Path": "pxelinux.cfg/{{.Machine.HexAddress}}"
          },
          {
            "Contents": "DEFAULT discovery\nPROMPT 0\nTIMEOUT 10\nLABEL discovery\n  KERNEL {{.Env.PathFor \"tftp\" .Env.Kernel}}\n  INITRD {{.Env.JoinInitrds \"tftp\"}}\n  APPEND {{.BootParams}}\n  IPAPPEND 2\n",
            "ID": "",
            "Meta": null,
            "Name": "pxelinux-mac",
            "Path": "pxelinux.cfg/{{.Machine.MacAddr \"pxelinux\"}}"
          },
          {
            "Contents": "#!ipxe\nkernel {{.Env.PathFor \"http\" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}\n{{range $initrd := .Env.Initrds}}\ninitrd {{$.Env.PathFor \"http\" $initrd}}\n{{end}}\nboot\n",
            "ID": "",
            "Meta": null,
            "Name": "ipxe",
            "Path": "{{.Machine.Address}}.ipxe"
          },
          {
            "Contents": "#!ipxe\nkernel {{.Env.PathFor \"http\" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}\n{{range $initrd := .Env.Initrds}}\ninitrd {{$.Env.PathFor \"http\" $initrd}}\n{{end}}\nboot\n",
            "ID": "",
            "Meta": null,
            "Name": "ipxe-mac",
            "Path": "{{.Machine.MacAddr \"ipxe\"}}.ipxe"
          },
          {
            "Contents": "#!/bin/bash\n# Copyright 2017, RackN\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# We get the following variables from start-up.sh\n# MAC BOOTDEV ADMIN_IP DOMAIN HOSTNAME HOSTNAME_MAC MYIP\n\nset -x\nshopt -s extglob\nexport PS4=\"${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): \"\ncp /usr/share/zoneinfo/GMT /etc/localtime\n\n# This will contain a token appropriate for the path being\n# used below.  Reset the token to the longer machine token.\nexport RS_TOKEN=\"{{.GenerateInfiniteToken}}\"\n\n# If we do not have hardware addresses set on the machine, set them now.\nget_macs() {\n    local maclist=\"\"\n    local nic=\"\"\n    for nic in /sys/class/net/*; do\n        [[ -f $nic/type \u0026\u0026 -f $nic/address \u0026\u0026 $(cat \"$nic/type\") == 1 ]] || continue\n        maclist=\"$maclist,\\\"$(cat \"$nic/address\")\\\"\"\n    done\n    printf '[%s]' \"${maclist#,}\"\n}\nmac_re='BOOTIF=([^ ]+)'\nif [[ $(cat /proc/cmdline) =~ $mac_re ]]; then\n    drpcli machines set \"$RS_UUID\" param last-boot-macaddr to \"\\\"${BASH_REMATCH[1]}\\\"\"\nfi\njson=\"$(drpcli machines show \"$RS_UUID\")\"\n# The machine does not have hardware addresses set, so set them\nif [[ \"$(jq '.HardwareAddrs | length' \u003c\u003c\u003c \"$json\")\" = 0 ]]; then\n    drpcli machines update \"$RS_UUID\" \"{\\\"HardwareAddrs\\\": $(get_macs)}\"\nfi\nunset get_macs json\n\n{{template \"reset-workflow.tmpl\" .}}\n{{template \"runner.tmpl\" .}}\n\n# The last line in this script must always be exit 0!!\nexit 0\n",
            "ID": "",
            "Meta": null,
            "Name": "control.sh",
            "Path": "{{.Machine.Path}}/control.sh"
          }
        ],
        "Validated": false
      },
      "ubuntu-16.04-install": {
        "Available": false,
        "BootParams": "debian-installer/locale=en_US.utf8 console-setup/layoutcode=us keyboard-configuration/layoutcode=us netcfg/dhcp_timeout=120 netcfg/choose_interface=auto url={{.Machine.Url}}/seed netcfg/get_hostname={{.Machine.Name}} root=/dev/ram rw quiet {{if .ParamExists \"kernel-console\"}}{{.Param \"kernel-console\"}}{{end}} -- {{if .ParamExists \"kernel-console\"}}{{.Param \"kernel-console\"}}{{end}}",
        "Description": "Ubuntu-16.04 install points to the latest release version",
        "Documentation": "NOTE: Default Ubuntu ISOs will attempt to check internet repositories, \nthis can cause problems during provisioning if your environment does not have outbound access.\nWorkaround this by defining Options 3 (Gateway) and 6 (DNS) for your machines' Subnet.\n",
        "Errors": [],
        "Initrds": [
          "install/netboot/ubuntu-installer/amd64/initrd.gz"
        ],
        "Kernel": "install/netboot/ubuntu-installer/amd64/linux",
        "Meta": {
          "color": "orange",
          "feature-flags": "change-stage-v2",
          "icon": "linux",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ubuntu-16.04-install",
        "OS": {
          "Codename": "",
          "Family": "ubuntu",
          "IsoFile": "ubuntu-16.04.5-server-amd64.iso",
          "IsoSha256": "c94de1cc2e10160f325eb54638a5b5aa38f181d60ee33dae9578d96d932ee5f8",
          "IsoUrl": "http://mirror.math.princeton.edu/pub/ubuntu-iso/16.04/ubuntu-16.04.5-server-amd64.iso",
          "Name": "ubuntu-16.04",
          "Version": "16.04"
        },
        "OnlyUnknown": false,
        "OptionalParams": [
          "part-scheme",
          "operating-system-disk",
          "provisioner-default-user",
          "provisioner-default-fullname",
          "provisioner-default-uid",
          "provisioner-default-password-hash",
          "kernel-console",
          "proxy-servers",
          "dns-domain",
          "local-repo",
          "proxy-servers",
          "ntp-servers",
          "select-kickseed"
        ],
        "ReadOnly": false,
        "RequiredParams": null,
        "Templates": [
          {
            "Contents": "",
            "ID": "kexec.tmpl",
            "Meta": null,
            "Name": "kexec",
            "Path": "{{.Machine.Path}}/kexec"
          },
          {
            "Contents": "",
            "ID": "default-pxelinux.tmpl",
            "Meta": null,
            "Name": "pxelinux",
            "Path": "pxelinux.cfg/{{.Machine.HexAddress}}"
          },
          {
            "Contents": "",
            "ID": "default-ipxe.tmpl",
            "Meta": null,
            "Name": "ipxe",
            "Path": "{{.Machine.Address}}.ipxe"
          },
          {
            "Contents": "",
            "ID": "default-pxelinux.tmpl",
            "Meta": null,
            "Name": "pxelinux-mac",
            "Path": "pxelinux.cfg/{{.Machine.MacAddr \"pxelinux\"}}"
          },
          {
            "Contents": "",
            "ID": "default-ipxe.tmpl",
            "Meta": null,
            "Name": "ipxe-mac",
            "Path": "{{.Machine.MacAddr \"ipxe\"}}.ipxe"
          },
          {
            "Contents": "",
            "ID": "select-kickseed.tmpl",
            "Meta": null,
            "Name": "seed",
            "Path": "{{.Machine.Path}}/seed"
          },
          {
            "Contents": "",
            "ID": "net-post-install.sh.tmpl",
            "Meta": null,
            "Name": "net-post-install.sh",
            "Path": "{{.Machine.Path}}/post-install.sh"
          }
        ],
        "Validated": false
      }
    },
    "params": {
      "access-keys": {
        "Available": false,
        "Description": "A map of ssh public keys to install for the root user",
        "Documentation": "This map is used to put ssh public keys in place for the root user.\n\nThe key of the map is a arbritary name and the value is the ssh\npublic key for that name.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "access-keys",
        "ReadOnly": false,
        "Schema": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Secure": false,
        "Validated": false
      },
      "access-ssh-root-mode": {
        "Available": false,
        "Description": "Defines the root login policy",
        "Documentation": "This string defines the login policy for the root user.\n\nPossible values are:\n  without-password - default\n  yes\n  no\n  forced-commands-only\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "unlock",
          "title": "Digital Rebar Community Content"
        },
        "Name": "access-ssh-root-mode",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "change-stage/map": {
        "Available": false,
        "Description": "A map of current stage to next stage and reboot choices",
        "Documentation": "This map is used to select the next stage based upon the current stage.\n\nThe form is current stage as the key with the value being a string with a\ncolon seperated next stage and return action (success or reboot).\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "shuffle",
          "title": "Digital Rebar Community Content"
        },
        "Name": "change-stage/map",
        "ReadOnly": false,
        "Schema": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Secure": false,
        "Validated": false
      },
      "custom-ipxe": {
        "Available": false,
        "Description": "Custom iPXE boot script",
        "Documentation": "You can use this whenever you need a custom iPXE boot action,\nsuch as booting from a remote URL, booting to an iPXE prompt for\ntroubleshooting, or simply playing around with different ipxe\ntools.  This param defaults to launching an iPXE shell.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "tag",
          "title": "Digital Rebar Community Content"
        },
        "Name": "custom-ipxe",
        "ReadOnly": false,
        "Schema": {
          "default": "shell",
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "dns-domain": {
        "Available": false,
        "Description": "DNS Domain to append to hostname.",
        "Documentation": "This is used currently in the Ubuntu/Debian preseed file to specify the DNS Domain Name of the host.\n\nThis may be in flux.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "tag",
          "title": "Digital Rebar Community Content"
        },
        "Name": "dns-domain",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "erase-hard-disk-set": {
        "Available": false,
        "Description": "Defines the set of disks to erase",
        "Documentation": "This string defines the set of disks to erase.  Space separated dev names.\n\ne.g. \"/dev/sda /dev/sdb\"\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "erase-hard-disk-set",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "extra-packages": {
        "Available": false,
        "Description": "Add extra packages to the initial install path",
        "Documentation": "This is an array of strings where each string is an additional package to\ninstall during the initial OS install.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "database",
          "title": "Digital Rebar Community Content"
        },
        "Name": "extra-packages",
        "ReadOnly": false,
        "Schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Secure": false,
        "Validated": false
      },
      "gohai-inventory": {
        "Available": false,
        "Description": "System inventory as reported by Gohai",
        "Documentation": "This provides an untyped dictionary of values from Gohai.\n\nThis is fairly raw data.  Other parameters are distilled from this.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "search",
          "readonly": "yes",
          "title": "Digital Rebar Community Content"
        },
        "Name": "gohai-inventory",
        "ReadOnly": false,
        "Schema": null,
        "Secure": false,
        "Validated": false
      },
      "gohai/skip": {
        "Available": false,
        "Description": "Skips gohai run during discovery",
        "Documentation": "Allows machines to stop using the discover-nogohai stage.\nWhen true, the gohai part of the discovery stage will be skipped\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "search minus",
          "title": "Digital Rebar Community Content"
        },
        "Name": "gohai/skip",
        "ReadOnly": false,
        "Schema": {
          "default": false,
          "type": "boolean"
        },
        "Secure": false,
        "Validated": false
      },
      "kernel-console": {
        "Available": false,
        "Description": "Defines the console string to use for boot environments",
        "Documentation": "This string defines the console tty string for the kernel boot string.\n\ne.g. console=ttyS1,115200\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "desktop",
          "title": "Digital Rebar Community Content"
        },
        "Name": "kernel-console",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "kexec-ok": {
        "Available": false,
        "Description": "Allows the machine agent to kexec instead of rebooting",
        "Documentation": "Allows the machine agent to call kexec to switch boot environments\nas long as the machine is currently running Linux, and the new\nenvironment has a template named 'kexec' that contains the\nkernel, initrds, and command line to use.\n",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "bolt",
          "title": "Digital Rebar Community Content"
        },
        "Name": "kexec-ok",
        "ReadOnly": false,
        "Schema": {
          "default": false,
          "type": "boolean"
        },
        "Secure": false,
        "Validated": false
      },
      "last-boot-macaddr": {
        "Available": false,
        "Description": "The MAC address the system most recently used to PXE boot",
        "Documentation": "Keeps track of the MAC address (in PXELINUX format) that the system\nmost recently PXE booted from.\n",
        "Errors": [],
        "Meta": {},
        "Name": "last-boot-macaddr",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "local-repo": {
        "Available": false,
        "Description": "Indicates that the install should use the local exploded iso as the install repo",
        "Documentation": "DEPRECATED: Do not use.\n\nBoolean value that tells the install steps to only use the local exploded iso on the \nDRP server as the only installation repo.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "deprecated": "July 3, 2018",
          "icon": "database",
          "title": "Digital Rebar Community Content"
        },
        "Name": "local-repo",
        "ReadOnly": false,
        "Schema": {
          "type": "boolean"
        },
        "Secure": false,
        "Validated": false
      },
      "local-security-repo": {
        "Available": false,
        "Description": "Specifies the security repo to use for Debian/Ubuntu OSes",
        "Documentation": "The string value is either a URL for Ubuntu systems or a host/path string\nfor Debian systems.  This will override the default security repos if \nspecified.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "database",
          "title": "Digital Rebar Community Content"
        },
        "Name": "local-security-repo",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "machine-meta/color": {
        "Available": false,
        "Description": "The color for machines icon",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "info",
          "title": "RackN Content"
        },
        "Name": "machine-meta/color",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "machine-meta/icon": {
        "Available": false,
        "Description": "The icon for machines icon",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "info",
          "title": "RackN Content"
        },
        "Name": "machine-meta/icon",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "machine-plugin": {
        "Available": false,
        "Description": "The plugin that should manage this machine",
        "Documentation": "The plugin that should manage this machine.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "user circle",
          "title": "Digital Rebar Community Content"
        },
        "Name": "machine-plugin",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "ntp-servers": {
        "Available": false,
        "Description": "Defines the set of NTP servers to apply to the system.",
        "Documentation": "This is an array of strings where each string an IP address or Name of\nan NTP server.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "time",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ntp-servers",
        "ReadOnly": false,
        "Schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Secure": false,
        "Validated": false
      },
      "operating-system-disk": {
        "Available": false,
        "Description": "Defines the disk the installer should use",
        "Documentation": "Defines the disk the installer should use for OS installation.  The usage of this\nparameter inside a template should add a /dev/ if required.  The value should just\nbe the disk simple name.\n\ne.g. sda\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "operating-system-disk",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "package-repositories": {
        "Available": false,
        "Description": "Repositories to use to install packages from",
        "Documentation": "This provides a list of repositories to install packages from.\nIt includes dedicated OS installation repositories and more general ones.\n\nAn example:\n  - tag: \"centos-7-install\" # Every repository needs a unique tag.\n    # A repository can be used by multiple operating systems.\n    # The usual example of this is the EPEL repository, which\n    # can be used by all of the RHEL variants of a given generation.\n    os:\n      - \"centos-7\"\n    # If installSource is true, then the URL points directly\n    # to the location we should use for all OS install purposes\n    # save for fetching kernel/initrd pairs from (for now, we will\n    # still assume that they will live on the DRP server).\n    # When installSounrce is true, the os field must contain a single\n    # entry that is an exact match for the bootenv's OS.Name field.\n    installSource: true\n    # For redhat-ish distros when installSource is true,\n    # this URL must contain distro, component, and arch components,\n    # and as such they do not need to be further specified.\n    url: \"http://mirrors.kernel.org/centos/7/os/x86_64\"\n  - tag: \"centos-7-everything\"\n    # Since installSource is not true here,\n    # we can define several package sources at once by\n    # providing a distribution and a components section,\n    # and having the URL point at the top-level directory\n    # where everything is housed.\n    # DRP knows how to expand repo definitions for CentOS and\n    # ScientificLinux provided that they follow the standard\n    # mirror directory layout for each distro.\n    os:\n      - centos-7\n    url: \"http://mirrors.kernel.org/centos\"\n    distribution: \"7\"\n    components:\n      - atomic\n      - centosplus\n      - cloud\n      - configmanagement\n      - cr\n      - dotnet\n      - extras\n      - fasttrack\n      - opstools\n      - os\n      - paas\n      - rt\n      - sclo\n      - storage\n      - updates\n  - tag: \"debian-9-install\"\n    os:\n      - \"debian-9\"\n    installSource: true\n    # Debian URLs always follow the same rules, no matter\n    # whether the OS install flag is set.  As such,\n    # you must always also specify the distribution and\n    # at least the main component, although you can also\n    # specify other components.\n    url: \"http://mirrors.kernel.org/debian\"\n    distribution: stretch\n    components:\n      - main\n      - contrib\n      - non-free\n  - tag: \"debian-9-backports\"\n    os:\n      - \"debian-9\"\n    url: \"http://mirrors.kernel.org/debian\"\n    distribution: stretch-updates\n    components:\n      - main\n      - contrib\n      - non-free\n  - tag: \"debian-9-security\"\n    os:\n      - \"debian-9\"\n    url: \"http://security.debian.org/debian-security/\"\n    securitySource: true\n    distribution: stretch/updates\n    components:\n      - contrib\n      - main\n      - non-free\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "book",
          "title": "Digital Rebar Community Content"
        },
        "Name": "package-repositories",
        "ReadOnly": false,
        "Schema": {
          "default": [
            {
              "installSource": true,
              "os": [
                "centos-7"
              ],
              "tag": "centos-7",
              "url": "http://mirrors.edge.kernel.org/centos/7/os/x86_64/"
            },
            {
              "installSource": true,
              "os": [
                "centos-7.5.1804"
              ],
              "tag": "centos-7.5.1804",
              "url": "http://mirrors.edge.kernel.org/centos/7.5.1804/os/x86_64/"
            },
            {
              "components": [
                "atomic",
                "centosplus",
                "cr",
                "dotnet",
                "extras",
                "fasttrack",
                "os",
                "rt",
                "updates"
              ],
              "distribution": "7",
              "os": [
                "centos-7",
                "centos-7.3.1611",
                "centos-7.4.1708",
                "centos-7.5.1804"
              ],
              "tag": "centos-7-everything",
              "url": "http://mirrors.edge.kernel.org/centos"
            },
            {
              "distribution": "7",
              "os": [
                "centos-7",
                "centos-7.3.1611",
                "centos-7.4.1708",
                "centos-7.5.1804"
              ],
              "tag": "epel-7",
              "url": "http://mirrors.kernel.org/fedora-epel"
            },
            {
              "bootloc": "http://mirrors.edge.kernel.org/ubuntu/dists/xenial/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/",
              "components": [
                "main",
                "restricted",
                "multiverse",
                "universe"
              ],
              "distribution": "xenial",
              "installSource": true,
              "os": [
                "ubuntu-16.04"
              ],
              "tag": "ubuntu-16.04",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "xenial-backports",
              "os": [
                "ubuntu-16.04"
              ],
              "tag": "ubuntu-16.04-backports",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "xenial-updates",
              "os": [
                "ubuntu-16.04"
              ],
              "tag": "ubuntu-16.04-updates",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "xenial-security",
              "os": [
                "ubuntu-16.04"
              ],
              "securitySource": true,
              "tag": "ubuntu-16.04-security",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "bootloc": "http://mirrors.edge.kernel.org/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/",
              "components": [
                "main",
                "restricted",
                "multiverse",
                "universe"
              ],
              "distribution": "bionic",
              "installSource": true,
              "os": [
                "ubuntu-18.04"
              ],
              "tag": "ubuntu-18.04",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "bionic-backports",
              "os": [
                "ubuntu-18.04"
              ],
              "tag": "ubuntu-18.04-backports",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "bionic-updates",
              "os": [
                "ubuntu-18.04"
              ],
              "securitySource": true,
              "tag": "ubuntu-18.04-updates",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "components": [
                "main",
                "restricted",
                "universe",
                "multiverse"
              ],
              "distribution": "bionic-security",
              "os": [
                "ubuntu-18.04"
              ],
              "tag": "ubuntu-18.04-security",
              "url": "http://mirrors.edge.kernel.org/ubuntu/"
            },
            {
              "bootloc": "http://mirrors.kernel.org/debian/dists/stretch/main/installer-amd64/current/images/netboot/debian-installer/amd64/",
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "stretch",
              "installSource": true,
              "os": [
                "debian-9"
              ],
              "tag": "debian-9-install",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "stretch-updates",
              "os": [
                "debian-9"
              ],
              "tag": "debian-9-updates",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "stretch-backports",
              "os": [
                "debian-9"
              ],
              "tag": "debian-9-backports",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "contrib",
                "main",
                "non-free"
              ],
              "distribution": "stretch/updates",
              "os": [
                "debian-9"
              ],
              "securitySource": true,
              "tag": "debian-9-security",
              "url": "http://security.debian.org/debian-security/"
            },
            {
              "bootloc": "http://mirrors.kernel.org/debian/dists/jessie/main/installer-amd64/current/images/netboot/debian-installer/amd64/",
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "jessie",
              "installSource": true,
              "os": [
                "debian-8"
              ],
              "tag": "debian-8-install",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "jessie-updates",
              "os": [
                "debian-8"
              ],
              "tag": "debian-8-updates",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "main",
                "contrib",
                "non-free"
              ],
              "distribution": "jessie-backports",
              "os": [
                "debian-8"
              ],
              "tag": "debian-8-backports",
              "url": "http://mirrors.kernel.org/debian"
            },
            {
              "components": [
                "contrib",
                "main",
                "non-free"
              ],
              "distribution": "jessie/updates",
              "os": [
                "debian-8"
              ],
              "securitySource": true,
              "tag": "debian-8-security",
              "url": "http://security.debian.org/debian-security/"
            },
            {
              "installSource": true,
              "os": [
                "sledgehammer/6122f34b46b5b74b668d6779e33f5fcd0f44a8cc"
              ],
              "tag": "sledgehammer/6122f34b46b5b74b668d6779e33f5fcd0f44a8cc",
              "url": "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/6122f34b46b5b74b668d6779e33f5fcd0f44a8cc/"
            }
          ],
          "items": {
            "properties": {
              "bootloc": {
                "type": "string"
              },
              "components": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "distribution": {
                "type": "string"
              },
              "installSource": {
                "type": "boolean"
              },
              "os": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "packageType": {
                "type": "string"
              },
              "repoType": {
                "type": "string"
              },
              "securitySource": {
                "type": "boolean"
              },
              "tag": {
                "type": "string"
              },
              "url": {
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "tag",
              "os",
              "url"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "Secure": false,
        "Validated": false
      },
      "part-scheme": {
        "Available": false,
        "Description": "Defines a string that references a template for partitioning during installation.",
        "Documentation": "This string contains the name of a template that holds the Debian installer partitioning\ncommands for use during installation.\n\nThe string will be expanded into this template name:\n\n  part-seed-\u003cstring\u003e.tmpl\n\ne.g. softraid\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "part-scheme",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "provisioner-default-fullname": {
        "Available": false,
        "Description": "Defines full name of the default user",
        "Documentation": "Used in the Debian/Ubuntu installers to specify the full name of the default user.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "user",
          "title": "Digital Rebar Community Content"
        },
        "Name": "provisioner-default-fullname",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "provisioner-default-password-hash": {
        "Available": false,
        "Description": "Defines the password of the default user in hash form",
        "Documentation": "This specifies the password hash to use for the install process.  This is the \nroot password on CentOS-based installs and the default user on the Debian-based\ninstalls.\n\nTo generate a hash, use the following command:\n\n  echo 'import crypt,getpass; print crypt.crypt(getpass.getpass(), \"$6$16_CHARACTER_SALT_HERE\")' | python -\n\nSet your 16 character salt in the correct place.  This generate sha512 hash which should work on both\noperating system types.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "provisioner-default-password-hash",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "provisioner-default-uid": {
        "Available": false,
        "Description": "Defines uid to use for the default user",
        "Documentation": "Used in the Debian/Ubuntu installers to specify the uid of the default user.\n\nThe value is a string for of the integer value.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "user",
          "title": "Digital Rebar Community Content"
        },
        "Name": "provisioner-default-uid",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "provisioner-default-user": {
        "Available": false,
        "Description": "Defines the username of the default user",
        "Documentation": "Used in the Debian/Ubuntu installers to specify the username of the default user.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "user",
          "title": "Digital Rebar Community Content"
        },
        "Name": "provisioner-default-user",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "proxy-servers": {
        "Available": false,
        "Description": "Defines the set of HTTP proxy servers to apply to the system.",
        "Documentation": "This is an array of URLs where each string is an HTTP proxy server to references.\n\nThe URLs can be names or IPs with ports and schemas.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "browser",
          "title": "Digital Rebar Community Content"
        },
        "Name": "proxy-servers",
        "ReadOnly": false,
        "Schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Secure": false,
        "Validated": false
      },
      "rs-debug-enable": {
        "Available": false,
        "Description": "Enables bash debugging ('set -x') in the 'setup.tmpl'.",
        "Documentation": "Boolean value that enables Bash Script debugging - essentially\nby turning on 'set -x' globally.  Scripts can (and probably do)\nenable/disable this flags in various sections.  In those cases\nwe are not overriding those values. \n\nAdditionally, the shell variable 'RS_DEBUG_ENABLE' is set to 1 (on)\nfor Script authors to use.  This allows a construct like\n\n  (( $RS_DEBUG_ENABLE )) \u0026\u0026 run_debug_function\n",
        "Errors": [],
        "Meta": {
          "color": "red",
          "icon": "bug",
          "title": "Digital Rebar Community Content"
        },
        "Name": "rs-debug-enable",
        "ReadOnly": false,
        "Schema": {
          "default": false,
          "type": "boolean"
        },
        "Secure": false,
        "Validated": false
      },
      "select-kickseed": {
        "Available": false,
        "Description": "Use an alternate Kickstart or Preseed install configuration file.",
        "Documentation": "The name of a custom kickstart or preseed template to use.  If not defined, the\ndefault for each platform will be used, as follows\n\n  'net-seed.tmpl' for Debian/Ubuntu platforms\n  'centos-7.ks.tmpl' for CentOS 7 platforms\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "select-kickseed",
        "ReadOnly": false,
        "Schema": {
          "type": "string"
        },
        "Secure": false,
        "Validated": false
      },
      "zero-hard-disks-for-os-install": {
        "Available": false,
        "Description": "Whether to zero entire hard disks when erasing before install",
        "Documentation": "By default, the erase disks for os install task tries to only erase\nany metadata on the disks that may confuse a next OS install, along with\n(optionally) attempting to discard all sectors on devices that support\ndiscard.  If this is set to true, the task will also zero all sectors\non any non-SSD drives.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "zero-hard-disks-for-os-install",
        "ReadOnly": false,
        "Schema": {
          "default": false,
          "type": "boolean"
        },
        "Secure": false,
        "Validated": false
      }
    },
    "profiles": {
      "root-access-example": {
        "Available": false,
        "Description": "Example profile for setting the access-keys and access-ssh-root-mode parameters",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "key"
        },
        "Name": "root-access-example",
        "Params": {
          "access-keys": {
            "greg": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDvqrpVfs9MXwjleLNPICcjAMviF3FJq85sMAe/4ejNDLMOcjDIFz4aQxrZx6sPlaqWADdy9XADaKgaYZwNssE9s6GNGJVORXl+vacLslwcrWo7aThzfKSlkn6wul3PcVjvIINQGiH/sUznLT8zUGR0hWX2Pds80iSxaQhIoFC8+DEVPSr5CIlliaCiYmwBB2FjBvR6ryltqxx3PIjJ4RwiP77DV6kdkG2khdY2XB7WLJptlgrg2U20TKG/9LrBqPFcM/m0BEmp01xN60A/O5Iw+vTXQoR3CX0mlNIzQIeAbtqau+uPkzd2TPzNOZebEvOnw1MxJPLjLqvxXRw54Bt9 galthaus@Gregs-MacBook-Pro.local"
          },
          "access-ssh-root-mode": "without-password"
        },
        "ReadOnly": false,
        "Validated": false
      }
    },
    "stages": {
      "centos-7.5.1804-install": {
        "Available": false,
        "BootEnv": "centos-7.5.1804-install",
        "Description": "CentOS 7.5.1804 install stage.",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "download",
          "title": "Digital Rebar Community Content"
        },
        "Name": "centos-7.5.1804-install",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "set-hostname",
          "centos-drp-only-repos",
          "ssh-access"
        ],
        "Templates": [],
        "Validated": false
      },
      "complete": {
        "Available": false,
        "BootEnv": "local",
        "Description": "Stage that represents workflow completion to local disk boot but leaves the runner running.",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "green",
          "icon": "check circle outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "complete",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [],
        "Templates": [],
        "Validated": false
      },
      "complete-nowait": {
        "Available": false,
        "BootEnv": "local",
        "Description": "Stage that represents workflow completion to local disk.",
        "Documentation": "This is deprectated and leaves the runner running, but will exit install bootenvs correctly.\nThe use of this was to exit install workflows.  This will continue to work for that, but\nshould be replaced by finish-install.\n",
        "Errors": [],
        "Meta": {
          "color": "green",
          "icon": "checkmark",
          "title": "Digital Rebar Community Content"
        },
        "Name": "complete-nowait",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": false,
        "Tasks": [],
        "Templates": [],
        "Validated": false
      },
      "discover": {
        "Available": false,
        "BootEnv": "sledgehammer",
        "Description": "Discovery stage used to inventory and baseline new machines",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "purple",
          "icon": "spinner",
          "title": "Digital Rebar Community Content"
        },
        "Name": "discover",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "gohai",
          "ssh-access"
        ],
        "Templates": [],
        "Validated": false
      },
      "discover-no-gohai": {
        "Available": false,
        "BootEnv": "sledgehammer",
        "Description": "DEPRECATED - Discovery stage used to discover new machines - no inventory",
        "Documentation": "DEPRECATED! Use the discover Stage with gohai/skip Param instead.\n\nPre gohai/skip Parameter, used to run discovery without gohai action.\n",
        "Errors": [],
        "Meta": {
          "color": "gray",
          "deprecated": "25 June 2018",
          "icon": "ban",
          "title": "Digital Rebar Community Content"
        },
        "Name": "discover-no-gohai",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "ssh-access"
        ],
        "Templates": [],
        "Validated": false
      },
      "erase-hard-disk-set": {
        "Available": false,
        "BootEnv": "sledgehammer",
        "Description": "Erases a set of disks.\n",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "erase-hard-disk-set",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "erase-hard-disk-set"
        ],
        "Templates": [],
        "Validated": false
      },
      "finish-install": {
        "Available": false,
        "BootEnv": "local",
        "Description": "Stage to indicate that all the install tasks are done and the system should complete the OS install",
        "Documentation": "Originally, this stage was used with the STOP runner action in the change-stage/map and this will\ncontinue to work.\n\nGoing forward, the STOP action is not required.  The changing of bootenv from something-install to\nlocal will cause the runner to exit.\n\nThe runner will also continue to run regardless of the RunnerWait flag.\n",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "checkmark",
          "title": "Digital Rebar Community Content"
        },
        "Name": "finish-install",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": false,
        "Tasks": [],
        "Templates": [],
        "Validated": false
      },
      "machine-meta": {
        "Available": false,
        "BootEnv": "",
        "Description": "Stage to assign the machine icon and color",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "info"
        },
        "Name": "machine-meta",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "machine-meta-setter"
        ],
        "Templates": [],
        "Validated": false
      },
      "prep-install": {
        "Available": false,
        "BootEnv": "sledgehammer",
        "Description": "Prepares system for OS install by zeroing out any data on the disks\nthat might confuse the OS install process.\n",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "prep-install",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "erase-hard-disks-for-os-install"
        ],
        "Templates": [],
        "Validated": false
      },
      "reorder-uefi-bootorder": {
        "Available": false,
        "BootEnv": "",
        "Description": "Reorder the UEFI bootorder during OS install to make the current boot device the first one.",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "reorder-uefi-bootorder",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "always-pxe-in-uefi-first"
        ],
        "Templates": [],
        "Validated": false
      },
      "sledgehammer-wait": {
        "Available": false,
        "BootEnv": "sledgehammer",
        "Description": "Wait for more tasks in sledgehammer - useful for debugging",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "hand paper",
          "title": "Digital Rebar Community Content"
        },
        "Name": "sledgehammer-wait",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [],
        "Templates": [],
        "Validated": false
      },
      "ssh-access": {
        "Available": false,
        "BootEnv": "",
        "Description": "Stage that installs SSH keys and configure SSH access policy",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ssh-access",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "ssh-access"
        ],
        "Templates": [],
        "Validated": false
      },
      "ubuntu-16.04-install": {
        "Available": false,
        "BootEnv": "ubuntu-16.04-install",
        "Description": "Ubuntu 16.04 installation stage.  References latest release",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "yellow",
          "icon": "download",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ubuntu-16.04-install",
        "OptionalParams": [],
        "Profiles": [],
        "ReadOnly": false,
        "Reboot": false,
        "RequiredParams": [],
        "RunnerWait": true,
        "Tasks": [
          "ubuntu-drp-only-repos",
          "ssh-access"
        ],
        "Templates": [],
        "Validated": false
      }
    },
    "tasks": {
      "always-pxe-in-uefi-first": {
        "Available": false,
        "Description": "Make sure that the EFI BootOrder variable has the NIC we installed from first.",
        "Documentation": "Certian Linux distributions reorder the UEFI boot options to always\nlocally boot from their install first, which is not generally what\ndr-provision wants, as it makes regaining control of the machine by\nPXE booting it to Sledgehammer harder.  This task rewrites the UEFI\nboot order to have whatever device we booted from be the first.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "icon": "disk outline",
          "title": "Digital Rebar Community Content"
        },
        "Name": "always-pxe-in-uefi-first",
        "OptionalParams": [],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "#!/bin/bash\n{{ template \"setup.tmpl\" .}}\nset -x\numount_things() {\n    if [[ $efiVarsMounted ]]; then\n        umount /sys/firmware/efi/efivars || :\n    fi\n    if [[ $sysMounted ]]; then\n        umount /sys || :\n    fi\n}\ntrap umount_things EXIT\nif [[ ! -d /sys/firmware ]]; then\n    mount -t sysfs sysfs /sys\n    sysMounted=true\nfi\nif [[ ! -d /sys/firmware/efi ]]; then\n    echo \"No EFI firmware, nothing to do\"\n    exit 0\nfi\nif [[ $(echo /sys/firmware/efi/efivars/*) = '/sys/firmware/efi/efivars/*' ]]; then\n    mkdir -p /sys/firmware/efi/efivars\n    mount -t efivarfs efivarfs /sys/firmware/efi/efivars\n    efiVarsMounted=true\nfi\nif ! which efibootmgr; then\n    echo \"Missing efibootmgr, please install it as part of your OS install\"\n    exit 1\nfi\nefibootmgr -v || :\ncurrent=\"$(efibootmgr |awk '/^BootCurrent/ {print $2}')\"\norder=\"$(efibootmgr |awk '/^BootOrder/ {print $2}')\"\nif [[ ! $order ]]; then\n    efibootmgr -o \"$current\"\nelse\n    efibootmgr -o \"${current},${order}\"\nfi\nefibootmgr -D || :\nefivootmgr -v || :\n",
            "ID": "",
            "Meta": null,
            "Name": "munge-boot-order-with-efibootmgr",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "centos-drp-only-repos": {
        "Available": false,
        "Description": "A task to force the machine to switch to DRP hosted-only centos repos.",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "centos-drp-only-repos",
        "OptionalParams": [
          "local-repo"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "centos-drp-only-repos.sh.tmpl",
            "Meta": null,
            "Name": "Force node to install from drp hosted repos",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "change-stage": {
        "Available": false,
        "Description": "A task to change stages",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "shuffle",
          "title": "Digital Rebar Community Content"
        },
        "Name": "change-stage",
        "OptionalParams": [
          "change-stage/map"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "change-stage.sh.tmpl",
            "Meta": null,
            "Name": "Change stage",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "erase-hard-disk-set": {
        "Available": false,
        "Description": "Erases any data on the specified hard disk that might confuse the OS install\nprocess.  This includes LVM metadata, partition tables, software RAID signatures,\nand the first and last megabyte of any partitions and disks.\n",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "erase",
          "title": "Digital Rebar Community Content"
        },
        "Name": "erase-hard-disk-set",
        "OptionalParams": [
          "erase-hard-disk-set"
        ],
        "ReadOnly": false,
        "RequiredParams": [
          "zero-hard-disks-for-os-install"
        ],
        "Templates": [
          {
            "Contents": "#!/bin/bash\n. helper\n\n# Clear functional data - assumes /dev/sda or the like\nfunction clear_disk() {\n    local disk\n    disk=$1\n    diskbase=${disk/\\/dev\\/}\n\n    # Deactivate all known lvm and dm devices first, unmounting filesystems as needed.\n    echo \"Deactivating all known volume groups on $disk\"\n    blkdeactivate -u -d force,retry -l retry,wholevg $disk || :\n    # Nuke it all.\n    declare vg pv maj min blocks name\n    # Make sure that the kernel knows about all the partitions\n    echo \"Probing for all partitions on $disk.  Failures are OK.\"\n    partprobe \"$disk\" || :\n\n    # Zap any volume groups that may be lying around.\n    vgscan --ignorelockingfailure -P\n    while read vg; do\n        echo \"Forcibly removing volume group $vg\"\n        vgremove -ff -y \"$vg\" || :\n    done \u003c \u003c(vgs --noheadings -o vg_name,pv_name | grep $disk | awk '{ print $1 }' | sort -u)\n\n    # Wipe out any LVM metadata that the kernel may have detected.\n    pvscan --ignorelockingfailure\n    while read pv; do\n        echo \"Forcibly removing physical volume $pv\"\n        pvremove -ff -y \"$pv\" || :\n    done \u003c \u003c(pvs --noheadings -o pv_name | grep $disk)\n\n    # Now zap any partitions along with any RAID metadata that may exist.\n    while read maj min blocks name; do\n        [[ -b /dev/$name \u0026\u0026 -w /dev/$name \u0026\u0026 $name != name ]] || continue\n        echo \"Forcibly removing any RAID metadata on /dev/$name. Failures are OK if readonly\"\n        mdadm --misc --zero-superblock --force /dev/$name || :\n        if (( blocks \u003e= 4096)); then\n            echo \"Zeroing the first and last 2 megs of /dev/$name. Failures are OK if readonly\"\n            dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=4096\" || :\n            dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=4096\" \"seek=$(($blocks - 4096))\" || :\n        else\n            echo \"Zeroing small device /dev/$name.  Failures are OK if readonly\"\n            dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=$blocks\" || :\n        fi\n    done \u003c \u003c(tac /proc/partitions | grep $diskbase)\n}\n\n# Wipe disk assumes /dev/sda or the like\nfunction wipe_disk() {\n    local disk bd dev spinner want_zero skip_zero\n    disk=$1\n    bd=/sys/block/${disk/\\/dev\\/}\n    dev=\"/dev/${bd##*/}\"\n\n    [[ -b $dev ]] || continue\n    grep -q 'devices/virtual' \u003c \u003c(readlink \"$bd\") \u0026\u0026 continue\n    spinner=$(cat \"$bd/queue/rotational\")\n    want_zero=\"{{.Param \"zero-hard-disks-for-os-install\"}}\"\n    skip_zero=$(cat \"$bd/queue/discard_zeroes_data\")\n    if [[ $want_zero = true \u0026\u0026 $skip_zero != 1 \u0026\u0026 $spinner = 1 ]]; then\n        # blkdiscard -z does the same job as dd if=/dev/zero,\n        # except the kernel does all the work and it uses\n        # the SCSI command WRITE_SAME if the device supports\n        # it, which can greatly speed up the zeroing process.\n        echo \"Zeroing $dev\"\n        blkdiscard -z \"$dev\" || :\n    fi\n    # if discard_max_bytes is zero, then blkdiscard will not work anyways.\n    if [[ $(cat \"$bd/queue/discard_max_bytes\") != 0 ]]; then\n        # Try secure erase first, then regular discard.\n        echo \"Attempting to secure discard $dev.\"\n        echo \"This may fail if the device does not support secure discard.\"\n        if blkdiscard -s \"$dev\"; then\n            echo \"Secure discard of $dev finished\"\n        else\n            echo \"Sercure discard of $dev failed, attempting normal discard\"\n            if blkdiscard \"$dev\"; then\n                echo \"Normal discard of $dev finished\"\n            else\n                echo \"Normal discard of $dev failed\"\n            fi\n        fi\n    fi\n}\n\n{{if .ParamExists \"erase-hard-disk-set\" }}\ndisks=\"{{.Param \"erase-hard-disk-set\"}}\"\n# fill out disks\nfor bd in $disks; do\n    clear_disk $bd\ndone\n# For paranoia's sake, try to discard all blocks on the remaining\n# top-level block devices in parallel.\nfor bd in $disks; do\n  ( wipe_disk $bd ) \u0026\ndone\nwait\npartprobe\n{{else}}\necho \"No disks to erase. Skipping...\"\n{{end}}\nexit 0\n",
            "ID": "",
            "Meta": null,
            "Name": "erase-disk",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "erase-hard-disks-for-os-install": {
        "Available": false,
        "Description": "Erases any data on the hard disks that might confuse the OS install\nprocess.  This includes LVM metadata, partition tables, software RAID signatures,\nand the first and last megabyte of any partitions and disks.\n",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "erase",
          "title": "Digital Rebar Community Content"
        },
        "Name": "erase-hard-disks-for-os-install",
        "OptionalParams": [],
        "ReadOnly": false,
        "RequiredParams": [
          "zero-hard-disks-for-os-install"
        ],
        "Templates": [
          {
            "Contents": "#!/bin/bash\n. helper\n# Deactivate all known lvm and dm devices first, unmounting filesystems as needed.\necho \"Deactivating all known volume groups\"\nblkdeactivate -u -d force,retry -l retry,wholevg || :\n# Nuke it all.\ndeclare vg pv maj min blocks name\n# Make sure that the kernel knows about all the partitions\nfor bd in /sys/block/*; do\n    [[ -b /dev/${bd##*/} ]] || continue\n    grep -q 'devices/virtual' \u003c \u003c(readlink \"$bd\") \u0026\u0026 continue\n    echo \"Probing for all partitions on dev/${bd##*/}.  Failures are OK.\"\n    partprobe \"/dev/${bd##*/}\" || :\ndone\n# Zap any volume groups that may be lying around.\nvgscan --ignorelockingfailure -P\nwhile read vg; do\n    echo \"Forcibly removing volume group $vg\"\n    vgremove -ff -y \"$vg\" || :\ndone \u003c \u003c(vgs --noheadings -o vg_name)\n# Wipe out any LVM metadata that the kernel may have detected.\npvscan --ignorelockingfailure\nwhile read pv; do\n    echo \"Forcibly removing physical volume $pv\"\n    pvremove -ff -y \"$pv\" || :\ndone \u003c \u003c(pvs --noheadings -o pv_name)\n# Now zap any partitions along with any RAID metadata that may exist.\nwhile read maj min blocks name; do\n    [[ -b /dev/$name \u0026\u0026 -w /dev/$name \u0026\u0026 $name != name ]] || continue\n    [[ $name = loop* ]] \u0026\u0026 continue\n    [[ $name = fd* ]] \u0026\u0026 continue\n    echo \"Forcibly removing any RAID metadata on /dev/$name. Failures are OK if readonly\"\n    mdadm --misc --zero-superblock --force /dev/$name || :\n    if (( blocks \u003e= 4096)); then\n        echo \"Zeroing the first and last 2 megs of /dev/$name. Failures are OK if readonly\"\n        dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=4096\" || :\n        dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=4096\" \"seek=$(($blocks - 4096))\" || :\n    else\n        echo \"Zeroing small device /dev/$name.  Failures are OK if readonly\"\n        dd \"if=/dev/zero\" \"of=/dev/$name\" \"bs=512\" \"count=$blocks\" || :\n    fi\ndone \u003c \u003c(tac /proc/partitions)\n# For paranoia's sake, try to discard all blocks on the remaining\n# top-level block devices in parallel.\nfor bd in /sys/block/*; do\n  (\n    [[ -b /dev/${bd##*/} ]] || continue\n    grep -q 'devices/virtual' \u003c \u003c(readlink \"$bd\") \u0026\u0026 continue\n    dev=\"/dev/${bd##*/}\"\n    spinner=$(cat \"$bd/queue/rotational\")\n    want_zero=\"{{.Param \"zero-hard-disks-for-os-install\"}}\"\n    skip_zero=$(cat \"$bd/queue/discard_zeroes_data\")\n    if [[ $want_zero = true \u0026\u0026 $skip_zero != 1 \u0026\u0026 $spinner = 1 ]]; then\n        # blkdiscard -z does the same job as dd if=/dev/zero,\n        # except the kernel does all the work and it uses\n        # the SCSI command WRITE_SAME if the device supports\n        # it, which can greatly speed up the zeroing process.\n        echo \"Zeroing $dev\"\n        blkdiscard -z \"$dev\" || :\n    fi\n    # if discard_max_bytes is zero, then blkdiscard will not work anyways.\n    if [[ $(cat \"$bd/queue/discard_max_bytes\") != 0 ]]; then\n        # Try secure erase first, then regular discard.\n        echo \"Attempting to secure discard $dev.\"\n        echo \"This may fail if the device does not support secure discard.\"\n        if blkdiscard -s \"$dev\"; then\n            echo \"Secure discard of $dev finished\"\n        else\n            echo \"Sercure discard of $dev failed, attempting normal discard\"\n            if blkdiscard \"$dev\"; then\n                echo \"Normal discard of $dev finished\"\n            else\n                echo \"Normal discard of $dev failed\"\n            fi\n        fi\n    fi\n  ) \u0026\ndone\nwait\n",
            "ID": "",
            "Meta": null,
            "Name": "erase-disks",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "gohai": {
        "Available": false,
        "Description": "Get basic system inventory using Gohai",
        "Documentation": "Sets Param: gohai-inventory\n\nCollect inventory from machines using drpcli gohai command\nand store the result in the gohai-inventory Param on the machine.\n\nIf you want to disable this behavior, set the gohai/skip Param to true.\n\nHint: this can be A LOT of data added to the machine param!  You may\nwant to use ?slim in the API to skip returning it on list requests.\n",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "search",
          "title": "Digital Rebar Community Content"
        },
        "Name": "gohai",
        "OptionalParams": [
          "gohai/skip",
          "gohai-inventory"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "#!/usr/bin/env bash\n{{if .Param \"gohai/skip\" -}}\n  echo \"Skipping drpcli gohai because Param gohai/skip is true\"\n{{else -}}\n  echo \"Running drpcli gohai (skip by setting gohai/skip to true)\"\n  drpcli machines set {{.Machine.UUID}} param gohai-inventory to '{}'\n  if drpcli gohai --help \u003e/dev/null 2\u003e/dev/null ; then\n    drpcli gohai | drpcli machines set {{.Machine.UUID}} param gohai-inventory to -\n  else\n    gohai | drpcli machines set {{.Machine.UUID}} param gohai-inventory to -\n  fi\n{{end -}}\n",
            "ID": "",
            "Meta": null,
            "Name": "gohai",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "machine-meta-setter": {
        "Available": false,
        "Description": "A task to set the color and icon for a machine",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "info"
        },
        "Name": "machine-meta-setter",
        "OptionalParams": [
          "machine-meta/color",
          "machine-meta/icon"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "machine-meta-setter.sh.tmpl",
            "Meta": null,
            "Name": "Set Icons",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "set-hostname": {
        "Available": false,
        "Description": "A task to set the hostname",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "set-hostname",
        "OptionalParams": [],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "set-hostname.sh.tmpl",
            "Meta": null,
            "Name": "Set the hostname on the machine",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "ssh-access": {
        "Available": false,
        "Description": "A task to put root ssh keys in place",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ssh-access",
        "OptionalParams": [
          "access-keys",
          "access-ssh-root-mode"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "access-keys.sh.tmpl",
            "Meta": null,
            "Name": "Put access keys in place for root user",
            "Path": ""
          }
        ],
        "Validated": false
      },
      "ubuntu-drp-only-repos": {
        "Available": false,
        "Description": "A task to force the node to switch to DRP hosted-only ubuntu repos.",
        "Documentation": "",
        "Errors": [],
        "Meta": {
          "color": "blue",
          "feature-flags": "sane-exit-codes",
          "icon": "key",
          "title": "Digital Rebar Community Content"
        },
        "Name": "ubuntu-drp-only-repos",
        "OptionalParams": [
          "local-repo"
        ],
        "ReadOnly": false,
        "RequiredParams": [],
        "Templates": [
          {
            "Contents": "",
            "ID": "ubuntu-drp-only-repos.sh.tmpl",
            "Meta": null,
            "Name": "Force node to install from drp hosted repos",
            "Path": ""
          }
        ],
        "Validated": false
      }
    },
    "templates": {
      "access-keys.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/bash\n#\n# This template populates the root's authorized keys file\n# and makes sure that the sshd config for PermitRootLogin is populated.\n#\n# Runs as part of a shell script for kickstart or net-post-install\n# The template does nothing if access-keys is undefined\n#\n# Required Parameters: access-keys\n# Optional Parameters: access-ssh-root-mode\n#\n# Parameter YAML format:\n#\n# access-keys:\n#   greg:  ssh-rsa key\n#   greg2:  ssh-rsa key\n# access-ssh-root-mode: \"without-password|yes|no|forced-commands-only\"\n#\n# Defaults:\n# access-keys - empty\n# access-ssh-root-mode - defaults to \"without-password\" if unspecified\n#\n\n{{if .ParamExists \"access-keys\"}}\nKEYS=/root/.ssh/authorized_keys\nTMP_KEYS=$(mktemp /tmp/authorized_keys.tmp.XXXXXXX)\necho \"Putting ssh access keys for root in place\"\nmkdir -p /root/.ssh\ncat \u003e\u003e$KEYS \u003c\u003cEOFSSHACCESS\n{{range $key := .Param \"access-keys\" -}}\n{{$key}}\n{{end -}}\nEOFSSHACCESS\n# if the we are called multiple times we get duplicate keys, lets fix that\ncat $KEYS | sort -u \u003e $TMP_KEYS\n[[ -s \"$TMP_KEYS\" ]] \u0026\u0026 cp $TMP_KEYS $KEYS\n[[ -f \"$TMP_KEYS\" ]] \u0026\u0026 rm -f $TMP_KEYS\nchmod 600 $KEYS\n{{end}}\n\necho \"Updating SSHD default values\"\nsed --in-place -r -e '/^#?PermitRootLogin/ s/^#//' -e '/^#?PermitRootLogin/ s/prohibit-password/{{if .ParamExists \"access-ssh-root-mode\"}}{{.Param \"access-ssh-root-mode\"}}{{else}}without-password{{end}}/' /etc/ssh/sshd_config\n\n# Restart sshd but os badness.\n. /etc/os-release\n# Ignore error because we may run in a place that doesn't have ssh installed\nif [[ \"$ID\" == \"ubuntu\" || \"$ID\" == \"debian\" ]] ; then\n    echo \"Restarting ssh\"\n    service ssh restart || true\nelse\n    echo \"Restarting sshd\"\n    service sshd restart || true\nfi\n\necho \"Finished updating access keys successfully\"\nexit 0\n",
        "Description": "",
        "Errors": [],
        "ID": "access-keys.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "centos-7.ks.tmpl": {
        "Available": false,
        "Contents": "# DigitalRebar Provision Centos-7 (and related distros) kickstart\n\n{{range .InstallRepos}}\n{{ .Install }}\n{{end}}\n# key --skip\n# Disable geolocation for language and timezone\n# Currently broken by https://bugzilla.redhat.com/show_bug.cgi?id=1111717\n# geoloc 0\ntimezone --utc UTC\nlang en_US.UTF-8\nkeyboard us\n# rebar\nrootpw --iscrypted {{if .ParamExists \"provisioner-default-password-hash\"}}{{.Param \"provisioner-default-password-hash\"}}{{else}}$6$drprocksdrprocks$upAIK9ynEEdFmaxJ5j0QRvwmIu2ruJa1A1XB7GZjrnYYXXyNr4qF9FttxMda2j.cmh.TSiLgn4B/7z0iSHkDC1{{end}}\nfirewall --disabled\nauthconfig --enableshadow --enablemd5\nselinux --disabled\n\nbootloader --location=mbr {{if .ParamExists \"operating-system-disk\"}}--driveorder={{.Param \"operating-system-disk\"}}{{end}} --append=\"rhgb quiet\"\nzerombr\n{{if .ParamExists \"operating-system-disk\"}}ignoredisk --only-use={{.Param \"operating-system-disk\"}}{{end}}\nclearpart --all {{if .ParamExists \"operating-system-disk\"}}--drives={{.Param \"operating-system-disk\"}}{{end}}\npart /boot --fstype ext4 --size=512 {{if .ParamExists \"operating-system-disk\"}}--ondisk={{.Param \"operating-system-disk\"}}{{end}}\npart /boot/efi --fstype vfat --size=512 {{if .ParamExists \"operating-system-disk\"}}--ondisk={{.Param \"operating-system-disk\"}}{{end}}\npart swap --recommended\npart pv.6 --size=1 --grow {{if .ParamExists \"operating-system-disk\"}}--ondisk={{.Param \"operating-system-disk\"}}{{end}}\nvolgroup {{.Machine.ShortName}} --pesize=32768 pv.6\nlogvol / --fstype ext4 --name=lv_root --vgname={{.Machine.ShortName}} --size=1 --grow --maxsize=10240\ntext\nreboot {{if .Param \"kexec-ok\" }}--kexec{{end}}\n\n%packages\n@core\ntrousers\nfipscheck\ndevice-mapper-multipath\nopenssh\ncurl.x86_64\nefibootmgr\ntar\n{{if .ParamExists \"extra-packages\" -}}\n{{ range $index, $element := (.Param \"extra-packages\") -}}\n{{$element}}\n{{end -}}\n{{end -}}\n%end\n\n%post\n\nexec \u003e /root/post-install.log 2\u003e\u00261\nset -x\nexport PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '\n\n{{template \"reset-workflow.tmpl\" .}}\n{{template \"runner.tmpl\" .}}\n\nsync\n%end\n",
        "Description": "",
        "Errors": [],
        "ID": "centos-7.ks.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "centos-drp-only-repos.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/bash\n(cd /etc/yum.repos.d; rm -f * || :)\n\n# Use the install repo from the provisioner for local package installation\ncat \u003e/etc/yum.repos.d/00-rebar.repo \u003c\u003c\"EOFLOCALREPO\"\n{{range .MachineRepos }}\n{{ .Lines }}\n{{end}}\nEOFLOCALREPO\n\nyum -y makecache\n",
        "Description": "",
        "Errors": [],
        "ID": "centos-drp-only-repos.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "change-stage.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/bash\n# DEPRECATED - do not use after v3.9\necho \"{{ \"this is deprecated!\" | upper | repeat 5 }}\"\n\n# This will contain a token appropriate for the path being\n# used below.  Either a create or update/show token\n{{template \"setup.tmpl\" .}}\n\n# Get current stage\nCURRENT_STAGE=$(drpcli machines show ${RS_UUID} | jq .Stage -r)\necho \"Machine's current stage: $CURRENT_STAGE\"\n\ndeclare -A DATA\n\ncs() { drpcli machines stage \"${RS_UUID}\" \"$1\" --force || exit $? }\n\n{{if .ParamExists \"change-stage/map\"}}\n{{ range $key, $value := (.Param \"change-stage/map\")}}\nDATA[\"{{$key}}\"]=\"{{$value}}\"\n{{end}}\n{{end}}\n\nif [[ ${DATA[\"$CURRENT_STAGE\"]} == \"\" ]]; then\n    cs none\n    exit $?\nfi\necho \"Checking for data: $CURRENT_STAGE from ${DATA[\"$CURRENT_STAGE\"]}\"\nIFS=':' read -r -a array \u003c\u003c\u003c \"${DATA[\"$CURRENT_STAGE\"]}\"\nif [[ ${array[0]} == \"\" ]] ; then\n    drpcli machines stage \"${RS_UUID}\" \"none\" --force\n    exit $?\nfi\nNEWSTAGE=\"${array[0]}\"\ncase ${array[1]} in\n    Success) cs $NEWSTAGE \u0026\u0026 exit 0;;\n    Reboot) cs $NEWSTAGE \u0026\u0026 exit_reboot;;\n    Stop) cs $NEWSTAGE \u0026\u0026 exit_stop;;\n    \"\") cs $NEWSTAGE \u0026\u0026 exit 0;;\n    *) echo \"No idea how to handle exit action ${array[1]}\"\n       exit 1;;\nesac\n",
        "Description": "",
        "Errors": [],
        "ID": "change-stage.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "default-elilo.tmpl": {
        "Available": false,
        "Contents": "delay=2\ntimeout=20\nverbose=5\nimage={{.Env.PathFor \"tftp\" .Env.Kernel}}\ninitrd={{.Env.JoinInitrds \"tftp\"}}\nappend={{.BootParams}}",
        "Description": "",
        "Errors": [],
        "ID": "default-elilo.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "default-ipxe.tmpl": {
        "Available": false,
        "Contents": "#!ipxe\nkernel {{.Env.PathFor \"http\" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}\n{{range $initrd := .Env.Initrds}}\ninitrd {{$.Env.PathFor \"http\" $initrd}}\n{{end}}\nboot\n",
        "Description": "",
        "Errors": [],
        "ID": "default-ipxe.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "default-pxelinux.tmpl": {
        "Available": false,
        "Contents": "DEFAULT {{.Env.Name}}\nPROMPT 0\nTIMEOUT 10\nLABEL {{.Env.Name}}\n  KERNEL {{.Env.PathFor \"tftp\" .Env.Kernel}}\n  {{if .Env.Initrds}}\n  INITRD {{.Env.JoinInitrds \"tftp\"}}\n  {{end}}\n  APPEND {{.BootParams}}\n  IPAPPEND 2\n",
        "Description": "",
        "Errors": [],
        "ID": "default-pxelinux.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "kexec.tmpl": {
        "Available": false,
        "Contents": "kernel {{.Env.PathFor \"http\" .Env.Kernel}}\n{{range $initrd := .Env.Initrds}}\ninitrd {{$.Env.PathFor \"http\" $initrd}}\n{{end}}\nparams {{.BootParams}}",
        "Description": "",
        "Errors": [],
        "ID": "kexec.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "machine-meta-setter.sh.tmpl": {
        "Available": false,
        "Contents": "#!/usr/bin/env bash\n# Set the Machine Meta: Icon and Color\n\nset -e\n\n{{template \"setup.tmpl\" .}}\n\n{{if .ParamExists \"machine-meta/color\" -}}\nCOLOR={{.Param \"machine-meta/color\"}}\n{{else -}}\nCOLOR=\"black\"\n{{end -}}\n\n{{if .ParamExists \"machine-meta/icon\" -}}\nICON={{.Param \"machine-meta/icon\"}}\n{{else -}}\nICON=\"server\"\n{{end -}}\n\necho \"Setting the Color to $COLOR and Icon to $ICON\"\n\n# do work!\ndrpcli machines update $RS_UUID \"{\\\"Meta\\\":{\\\"color\\\":\\\"$COLOR\\\", \\\"icon\\\": \\\"$ICON\\\"}}\" | jq .Meta\n\necho \"Finished successfully\"\nexit 0\n\n",
        "Description": "",
        "Errors": [],
        "ID": "machine-meta-setter.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "net-post-install.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/sh\n# Copyright 2016, RackN\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nset -x\nexec \u003e\u003e/target/root/post-install.log\nexec 2\u003e\u00261\n\nmount /proc /target/proc\n\ncat \u003e /target/update_system2.sh \u003c\u003c'EOF2341'\n#!/bin/bash\nset -x\nexport PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '\n\nwget \"{{.Machine.Url}}/seed\" -O /var/log/provision.seed\n\n{{template \"reset-workflow.tmpl\" .}}\n{{template \"runner.tmpl\" .}}\n\nEOF2341\n\nchmod +x /target/update_system2.sh\nchroot /target /update_system2.sh\nsync\n",
        "Description": "",
        "Errors": [],
        "ID": "net-post-install.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "net-seed.tmpl": {
        "Available": false,
        "Contents": "# Rebar seed file for Debian/Ubuntu installs\n# Locale and Language Settings\nd-i debian-installer/locale string en_US.UTF-8\nd-i console-setup/ask_detect boolean false\nd-i console-setup/layoutcode string us\nd-i keyboard-configuration/xkb-keymap select us\nd-i debian-installer/locale string en_US.UTF-8\nd-i console-tools/archs select at\nd-i console-keymaps-at/keymap select American English\nd-i debian-installer/keymap string us\nd-i keyboard-configuration/toggle select No toggling\n\n# Serial Console\nd-i debian-installer/serial-console boolean true\nd-i finish-install/keep-consoles boolean true\n\n# Network Configuration\nd-i netcfg/choose_interface select auto\nd-i netcfg/dhcp_timeout string 120\nd-i netcfg/get_hostname string {{.Machine.ShortName}}\n{{if .ParamExists \"dns-domain\" -}}\nd-i netcfg/get_domain string {{.Param \"dns-domain\"}}\n{{end}}\n\nd-i mirror/country string manual\n{{range .InstallRepos -}}\n{{ .Install }}\n{{end -}}\n\n{{if .ParamExists \"proxy-servers\" -}}\nd-i mirror/http/proxy string {{index (.Param \"proxy-servers\") 0}}\n{{else -}}\nd-i mirror/http/proxy string\n{{end -}}\n\n# Clock\nd-i clock-setup/utc boolean true\n{{if .ParamExists \"ntp-servers\" -}}\nd-i clock-setup/ntp boolean true\nd-i clock-setup/ntp-server string {{index (.Param \"ntp-servers\") 0}}\n{{else -}}\nd-i clock-setup/ntp boolean false\n{{end -}}\nd-i time/zone string UTC\n\n# Partitioner Label Default (GPT)\nd-i partman/choose_label string gpt\nd-i partman-basicfilesystems/choose_label string gpt\nd-i partman-partitioning/choose_label string gpt\nd-i partman/default_label string gpt\nd-i partman-basicfilesystems/default_label string gpt\nd-i partman-partitioning/default_label string gpt\n# Partitioner Prompt Confirmations\nd-i partman-auto/purge_lvm_from_device boolean true\nd-i partman-md/confirm boolean true\nd-i partman-md/device_remove_md boolean true\nd-i partman-md/confirm_nochanges boolean true\nd-i partman-md/confirm_nooverwrite boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-lvm/device_remove_lvm_span boolean true\nd-i partman-lvm/confirm_nochanges boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-basicfilesystems/no_swap boolean false\n#Partitioning Scheme\n{{if .ParamExists \"part-scheme\" -}}\n{{$templateName := (printf \"part-scheme-%s.tmpl\" (.Param \"part-scheme\")) -}}\n{{.CallTemplate $templateName .}}\n{{else -}}\n{{template \"part-scheme-default.tmpl\" .}}\n{{end -}}\nd-i partman/confirm_write_new_label boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\n\n{{if (and (eq \"ubuntu\" .Env.OS.Family)  (lt \"12.10\" .Env.OS.Version)) -}}\nd-i live-installer/net-image string {{.Env.InstallUrl}}/install/filesystem.squashfs\n{{end -}}\n\n# Default User Setup\nd-i passwd/make-user boolean true\nd-i passwd/user-uid string {{if .ParamExists \"provisioner-default-uid\"}}{{.Param \"provisioner-default-uid\"}}{{else}}1000{{end}}\nd-i passwd/user-fullname string {{if .ParamExists \"provisioner-default-fullname\"}}{{.Param \"provisioner-default-fullname\"}}{{else if .ParamExists \"provisioner-default-user\"}}{{.Param \"provisioner-default-user\"}}{{else}}Rocket Skates{{end}}\nd-i passwd/username string {{if .ParamExists \"provisioner-default-user\"}}{{.Param \"provisioner-default-user\"}}{{else}}rocketskates{{end}}\nd-i passwd/user-password-crypted password {{if .ParamExists \"provisioner-default-password-hash\"}}{{.Param \"provisioner-default-password-hash\"}}{{else}}$6$drprocksdrprocks$upAIK9ynEEdFmaxJ5j0QRvwmIu2ruJa1A1XB7GZjrnYYXXyNr4qF9FttxMda2j.cmh.TSiLgn4B/7z0iSHkDC1{{end}}\nd-i user-setup/allow-password-weak boolean true\nd-i user-setup/encrypt-home boolean false\n\nd-i debian-installer/allow_unauthenticated string true\ntasksel tasksel/first multiselect standard, server\nd-i pkgsel/include string openssh-server curl efibootmgr {{if .ParamExists \"extra-packages\"}}{{ range $index, $element := (.Param \"extra-packages\") }}{{if $index}} {{end}}{{$element}}{{end}}{{end}}\nd-i pkgsel/update-policy select none\n\n{{if .ParamExists \"kernel-console\"}}d-i debian-installer/add-kernel-opts string {{.Param \"kernel-console\"}}{{end}}\n# Completion questions\nd-i cdrom-detect/eject boolean false\nd-i finish-install/reboot_in_progress note\n\nxserver-xorg xserver-xorg/autodetect_monitor boolean true\nxserver-xorg xserver-xorg/config/monitor/selection-method select medium\nxserver-xorg xserver-xorg/config/monitor/mode-list select 1024x768 @ 60 Hz\n\nd-i preseed/late_command string wget {{.Machine.Url}}/post-install.sh -O /target/net-post-install.sh ; chmod +x /target/net-post-install.sh ; /target/net-post-install.sh\n",
        "Description": "",
        "Errors": [],
        "ID": "net-seed.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "part-scheme-default.tmpl": {
        "Available": false,
        "Contents": "{{if .ParamExists \"operating-system-disk\" -}}\nd-i partman-auto/disk string /dev/{{.Param \"operating-system-disk\"}}\nd-i grub-installer/choose_bootdev select /dev/{{.Param \"operating-system-disk\"}}\nd-i grub-installer/bootdev string /dev/{{.Param \"operating-system-disk\"}}\n{{else -}}\nd-i partman-auto/disk string /dev/sda\nd-i grub-installer/choose_bootdev select /dev/sda\nd-i grub-installer/bootdev string /dev/sda\n{{end -}}\nd-i partman-auto/method string lvm\nd-i partman-auto-lvm/guided_size string max\nd-i partman-auto-lvm/new_vg_name string {{.Machine.ShortName}}\nd-i partman-auto/choose_recipe select atomic\nd-i grub-installer/only_debian boolean true\n",
        "Description": "",
        "Errors": [],
        "ID": "part-scheme-default.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "profile.tmpl": {
        "Available": false,
        "Contents": "#!/usr/local/bin/env bash\n###\n#  This is a BASH script snippet intended to be run inside other BASH templates.\n#\n#  This relies upon /etc/rs-uuid set during sledgehammer bring up.  Using\n#  this file allows for the script to work with known and unknown machines.\n#  \n#  Simple helper to add an /etc/profile.d/drpcli.sh helper variables.\n#\n#         \\{\\{template \"profile.tmpl\" .\\}\\}\n#\n#  without the backslashes.\n###\n\nset -e\n\ncat \u003e /etc/profile.d/drpcli.sh  \u003c\u003cEOF\nexport RS_ENDPOINT=\"{{.ApiURL}}\"\nexport RS_UUID=\"$(cat /etc/rs-uuid)\"\nEOF\n\n",
        "Description": "",
        "Errors": [],
        "ID": "profile.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "reset-workflow.tmpl": {
        "Available": false,
        "Contents": "#!/usr/bin/env bash\n\n{{template \"setup.tmpl\" .}}\n\n# One day Reset the workflow chain here as well\n\n# Reset the current task list and mark the machine runnable.\ndrpcli machines update \"{{.Machine.UUID}}\" '{ \"Runnable\": true, \"CurrentTask\": -1 }'\n\n",
        "Description": "",
        "Errors": [],
        "ID": "reset-workflow.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "runner.tmpl": {
        "Available": false,
        "Contents": "#!/usr/bin/env bash\n\n{{template \"setup.tmpl\" .}}\n\n# Create a temp workspace\ntemp_dir=\"$(mktemp -d)\"\ncd \"$temp_dir\"\n\ndrpcli machines processjobs \"{{.Machine.UUID}}\"\n\nrm -rf \"$temp_dir\"\n\n",
        "Description": "",
        "Errors": [],
        "ID": "runner.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "select-kickseed.tmpl": {
        "Available": false,
        "Contents": "{{/*\n#\n# This template allows the operator to use the default Kickstart or\n# Preseed installation configuration file, or the operator may specify\n# an alternate kickstart/preseed file to use for local customizations.\n#\n# To use, simply create a Param called \"select-kickseed\" with the value\n# set to the template you wish to use.  You must specify the correct\n# template file and type for your Operating System install.  For example,\n# for CentOS, select a Kickstart; and for Ubuntu, a preseed.\n#\n# The param ('select-kickseed') can be applied to a Machine, or to a Profile\n# which is subsequently applied to a machine.  Remember the 'global' profile\n# applies to all machines provisioned by Digital Rebar Provision.\n#\n# Required Paramters:  none\n# Optional Paramters:  select-kickseed\n#\n# Defaults:\n#   select-seed:  empty\n#\n# Example (applies globally to all Machines):\n#   drpcli profiles set global param select-kickseed to \"my-net-seed.tmpl\"\n#\n*/}}\n{{if .ParamExists \"select-kickseed\" -}}\n  {{$selectKickSeed := (printf \"%s\" (.Param \"select-kickseed\")) -}}\n  {{.CallTemplate $selectKickSeed .}}\n{{else -}}\n  {{if (eq \"redhat\" .Env.OS.Family) -}} {{template \"centos-7.ks.tmpl\" .}} {{end -}}\n  {{if (eq \"centos\" .Env.OS.Family) -}} {{template \"centos-7.ks.tmpl\" .}} {{end -}}\n  {{if (eq \"debian\" .Env.OS.Family) -}} {{template \"net-seed.tmpl\" .}} {{end -}}\n  {{if (eq \"ubuntu\" .Env.OS.Family) -}} {{template \"net-seed.tmpl\" .}} {{end -}}\n{{end -}}\n",
        "Description": "",
        "Errors": [],
        "ID": "select-kickseed.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "set-hostname.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/bash\n#\n# This template populates the HOSTNAME of the system in various places.\n# It also exports the HOSTNAME variable for use by other templates.\n#\n# Runs as part of a shell script for kickstart or net-post-install\n#\n# Required Parameters:\n# Optional Parameters:\n#\n# Parameter YAML format:\n#\n# Defaults:\n#\nHOSTNAME=\"{{.Machine.Name}}\"\n\nif [ -f /etc/sysconfig/network ] ; then\n    sed -i -e \"s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/\" /etc/sysconfig/network\nfi\necho \"${HOSTNAME#*.}\" \u003e/etc/domainname\necho \"$HOSTNAME\" \u003e/etc/hostname\nhostname \"$HOSTNAME\"\nexport HOSTNAME\n\n",
        "Description": "",
        "Errors": [],
        "ID": "set-hostname.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "setup.tmpl": {
        "Available": false,
        "Contents": "#!/usr/local/bin/env bash\n# Helper to setup DRP tasks for other templates\n#\n###\n#  This is a BASH script snippet intended to be run inside other BASH templates.\n#\n#  Simple helper to prep a system with DRPCLI and JQ.  If not already installed,\n#  download and install the `drpcli` and `jq` binaries in /usr/local/bin and then\n#  source our `helper` tools\n#\n#  To use this in other templates, simply specify:\n#\n#         \\{\\{template \"setup.tmpl\" .\\}\\}\n#\n#  without the backslashes.\n###\n\nset -e\n###\n#  if we want debugging of our scripts, set the Param to true\n#  also set shell variable for script reuse if desired for further\n#  debugging\n###\n{{ if .ParamExists \"rs-debug-enable\" }}\n{{ if eq (.Param \"rs-debug-enable\") true }}\n# use in shell as: [[ $RS_DEBUG_ENABLE ]] \u0026\u0026 echo \"debugging\"\nRS_DEBUG_ENABLE=\"{{.Param \"rs-debug-enable\"}}\"\nset -x\n{{ end }}\n{{ end }}\n\n# We pretty much always need these parameters set, but\n# don't overwrite them if they already exist.\n[[ $RS_TOKEN ]] || export RS_TOKEN=\"{{.GenerateInfiniteToken}}\"\n[[ $RS_ENDPOINT ]] || export RS_ENDPOINT=\"{{.ApiURL}}\"\n[[ $RS_UUID ]] || export RS_UUID=\"{{.Machine.UUID}}\"\n\nfunction fixup_path() {\n  local _add_path\n  for _add_path in $(echo $* | sed 's/[:,]/ /g')\n  do\n    mkdir -p $_add_path\n    # inject colons to avoid partial match failures\n    grep -q \":$_add_path\" \u003c\u003c\u003c \":$PATH:\" || export PATH=\"$PATH:$_add_path\"\n  done\n}\n\nfixup_path /usr/local/bin /usr/sbin /sbin\n\n# TODO: we need to make drpcli/jq grab smarter to be a little\n#       more tolerant of OS arch/type - and grab the right one\nfor tool in drpcli jq; do\n    which \"$tool\" \u0026\u003e/dev/null \u0026\u0026 continue\n    echo \"Installing $tool in /usr/local/bin\"\n    case $tool in\n        drpcli) curl -sfLo \"/usr/local/bin/$tool\" \"{{.ProvisionerURL}}/files/drpcli.amd64.linux\";;\n        jq)     curl -sfLo \"/usr/local/bin/$tool\" \"{{.ProvisionerURL}}/files/jq\";;\n    esac\n    chmod 755 \"/usr/local/bin/$tool\"\ndone\nunset tool\n\nif [[ -r ./helper ]]; then\n    . ./helper\n    __sane_exit\nfi\n",
        "Description": "",
        "Errors": [],
        "ID": "setup.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      },
      "ubuntu-drp-only-repos.sh.tmpl": {
        "Available": false,
        "Contents": "#!/bin/bash\n\nexport LC_ALL=C LANGUAGE=C LANG=C\nexport DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true\ncat \u003e/etc/apt/sources.list \u003c\u003c\"EOFLOCALREPO\"\n{{range .MachineRepos }}\n{{ .Lines }}\n{{end}}\nEOFLOCALREPO\n\napt-get -y --force-yes update\n",
        "Description": "",
        "Errors": [],
        "ID": "ubuntu-drp-only-repos.sh.tmpl",
        "Meta": {},
        "ReadOnly": false,
        "Validated": false
      }
    }
  }
}
